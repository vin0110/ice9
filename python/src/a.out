* set regiseters
   0:     LD 5,0(0)	load memory size into GP
   1:    LDA 6,-105(5)	set stack pointer
* begin runtime
* begin write string
   3:    JEQ 1,5(7)	write(str): test len == 0
   4:     LD 3,0(2)	r3 = *sp
   5:   OUTC 3,3,3	out *sp
   6:    LDA 2,1(2)	++sp
   7:    LDA 1,-1(1)	--len
   8:    LDA 7,-6(7)	goto top
   9:    LDA 7,0(0)	jump back
* end write string
* begin array bounds
.SDATA "ERROR: Array index out of bounds"	string literal
  10:    LDC 1,32(0)	load size of error message
  11:    LDC 2,1(0)	load location of error message
  12:    LDC 0,14(0)	load return pc (halt inst below)
  13:    LDA 7,-10(7)	jump to string call
  14:  OUTNL 0,0,0
  15:   HALT 0,0,0	exit after printing error message
  16:    JLT 1,-7(7)	test lb
  17:    SUB 1,2,1	test ub
  18:    JLE 1,-9(7)	test ub
  19:    LDA 7,0(0)	return
* end array bounds
* end runtime
   2:    LDA 7,17(7)	jump over preamble
  20:    LDC 9,0(0)	int literal
  21:    LDC 10,0(0)	int literal
  22:    LDC 11,3(0)	int literal
  23:    LDA 12,0(5)	load base addr of global
  24:    LDA 1,0(11)	copy index
  25:    LDC 2,3(0)	load ub
  26:    LDC 0,28(0)	load return pc
  27:    LDA 7,-12(7)	jump to bound check
  28:    LDC 13,15(0)	load array stride
  29:    MUL 13,13,11	stride * index
  30:    SUB 13,12,13	adjust addr
  31:    LDA 1,0(10)	copy index
  32:    LDC 2,5(0)	load ub
  33:    LDC 0,35(0)	load return pc
  34:    LDA 7,-19(7)	jump to bound check
  35:    LDC 14,3(0)	load array stride
  36:    MUL 14,14,10	stride * index
  37:    SUB 14,13,14	adjust addr
  38:    LDA 1,0(9)	copy index
  39:    LDC 2,7(0)	load ub
  40:    LDC 0,42(0)	load return pc
  41:    LDA 7,-26(7)	jump to bound check
  42:    SUB 15,14,9	adjust addr
  43:     LD 16,0(15)	load variable
